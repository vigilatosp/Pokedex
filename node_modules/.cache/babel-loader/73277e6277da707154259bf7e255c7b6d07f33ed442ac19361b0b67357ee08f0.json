{"ast":null,"code":"import _classCallCheck from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MotionValue);\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"7.10.3\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n    this.lastUpdated = 0;\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n    this.canTrackVelocity = false;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n    this.events = {};\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v;\n      // Update timestamp\n      var delta = frameData.delta,\n        timestamp = frameData.timestamp;\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      }\n      // Update update subscribers\n      if (_this.prev !== _this.current && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      }\n      // Update velocity subscribers\n      if (_this.events.velocityChange) {\n        _this.events.velocityChange.notify(_this.getVelocity());\n      }\n      // Update render subscribers\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.velocityCheck = function (_ref) {\n      var timestamp = _ref.timestamp;\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n        if (_this.events.velocityChange) {\n          _this.events.velocityChange.notify(_this.getVelocity());\n        }\n      }\n    };\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @privateRemarks\n   *\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n   *\n   * ```jsx\n   * useOnChange(x, () => {})\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @deprecated\n   */\n  _createClass(MotionValue, [{\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect) {\n      this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = prev;\n      this.timeDelta = delta;\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.current;\n    }\n    /**\n     * @public\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n      return this.canTrackVelocity ?\n      // These casts could be avoided if parseFloat would be typed better\n      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n  }, {\n    key: \"start\",\n    value: function start(animation) {\n      var _this2 = this;\n      this.stop();\n      return new Promise(function (resolve) {\n        _this2.hasAnimated = true;\n        _this2.stopAnimation = animation(resolve);\n        if (_this2.events.animationStart) {\n          _this2.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this2.events.animationComplete) {\n          _this2.events.animationComplete.notify();\n        }\n        _this2.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.stopAnimation) {\n        this.stopAnimation();\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.stopAnimation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n    }\n  }]);\n  return MotionValue;\n}();\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\nexport { MotionValue, motionValue };","map":{"version":3,"names":["frameData","sync","SubscriptionManager","velocityPerSecond","isFloat","value","isNaN","parseFloat","MotionValue","init","options","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","change","notify","velocityChange","getVelocity","renderRequest","velocityCheck","hasAnimated","owner","subscription","on","eventName","callback","add","eventManagers","clear","passiveEffect","set","animation","stop","Promise","resolve","stopAnimation","animationStart","then","animationComplete","clearAnimation","animationCancel","clearListeners","motionValue"],"sources":["/home/guilherme/Imagens/Pokedex/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { frameData } from '../frameloop/data.mjs';\nimport { sync } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"7.10.3\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(animation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.stopAnimation = animation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.stopAnimation) {\n            this.stopAnimation();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.stopAnimation;\n    }\n    clearAnimation() {\n        this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}