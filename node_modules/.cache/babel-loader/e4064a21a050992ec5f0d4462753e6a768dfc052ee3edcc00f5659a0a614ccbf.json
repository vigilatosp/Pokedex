{"ast":null,"code":"import _slicedToArray from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/home/guilherme/Imagens/Pokedex/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low, high, value) {\n  return Math.min(Math.max(low, value), high);\n}\nvar ColorError = /*#__PURE__*/function (_Error) {\n  _inherits(ColorError, _Error);\n  var _super = _createSuper(ColorError);\n  function ColorError(color) {\n    _classCallCheck(this, ColorError);\n    return _super.call(this, \"Failed to parse color: \\\"\".concat(color, \"\\\"\"));\n  }\n  return _createClass(ColorError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar ColorError$1 = ColorError;\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\n\nfunction parseToRgba(color) {\n  if (typeof color !== 'string') throw new ColorError$1(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n  var normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n  var reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    var arr = Array.from(reducedHexMatch).slice(1);\n    return [].concat(_toConsumableArray(arr.slice(0, 3).map(function (x) {\n      return parseInt(r(x, 2), 16);\n    })), [parseInt(r(arr[3] || 'f', 2), 16) / 255]);\n  }\n  var hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    var _arr = Array.from(hexMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr.slice(0, 3).map(function (x) {\n      return parseInt(x, 16);\n    })), [parseInt(_arr[3] || 'ff', 16) / 255]);\n  }\n  var rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    var _arr2 = Array.from(rgbaMatch).slice(1);\n    return [].concat(_toConsumableArray(_arr2.slice(0, 3).map(function (x) {\n      return parseInt(x, 10);\n    })), [parseFloat(_arr2[3] || '1')]);\n  }\n  var hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    var _Array$from$slice$map = Array.from(hslaMatch).slice(1).map(parseFloat),\n      _Array$from$slice$map2 = _slicedToArray(_Array$from$slice$map, 4),\n      h = _Array$from$slice$map2[0],\n      s = _Array$from$slice$map2[1],\n      l = _Array$from$slice$map2[2],\n      a = _Array$from$slice$map2[3];\n    if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n    if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n    return [].concat(_toConsumableArray(hslToRgb(h, s, l)), [a || 1]);\n  }\n  throw new ColorError$1(color);\n}\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n\n  return (hash >>> 0) % 2341;\n}\nvar colorToInt = function colorToInt(x) {\n  return parseInt(x.replace(/_/g, ''), 36);\n};\nvar compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce(function (acc, next) {\n  var key = colorToInt(next.substring(0, 3));\n  var hex = colorToInt(next.substring(3)).toString(16); // NOTE: padStart could be used here but it breaks Node 6 compat\n  // https://github.com/ricokahler/color2k/issues/351\n\n  var prefix = '';\n  for (var i = 0; i < 6 - hex.length; i++) {\n    prefix += '0';\n  }\n  acc[key] = \"\".concat(prefix).concat(hex);\n  return acc;\n}, {});\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\n\nfunction nameToHex(color) {\n  var normalizedColorName = color.toLowerCase().trim();\n  var result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError$1(color);\n  return \"#\".concat(result);\n}\nvar r = function r(str, amount) {\n  return Array.from(Array(amount)).map(function () {\n    return str;\n  }).join('');\n};\nvar reducedHexRegex = new RegExp(\"^#\".concat(r('([a-f0-9])', 3), \"([a-f0-9])?$\"), 'i');\nvar hexRegex = new RegExp(\"^#\".concat(r('([a-f0-9]{2})', 3), \"([a-f0-9]{2})?$\"), 'i');\nvar rgbaRegex = new RegExp(\"^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*\".concat(r(',\\\\s*(\\\\d+)\\\\s*', 2), \"(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$\"), 'i');\nvar hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nvar namedColorRegex = /^[a-z]+$/i;\nvar roundColor = function roundColor(color) {\n  return Math.round(color * 255);\n};\nvar hslToRgb = function hslToRgb(hue, saturation, lightness) {\n  var l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor);\n  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n\n  var huePrime = (hue % 360 + 360) % 360 / 60;\n  var chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n  var lightnessModification = l - chroma / 2;\n  var finalRed = red + lightnessModification;\n  var finalGreen = green + lightnessModification;\n  var finalBlue = blue + lightnessModification;\n  return [finalRed, finalGreen, finalBlue].map(roundColor);\n};\n\n// taken from:\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\n\nfunction parseToHsla(color) {\n  var _parseToRgba$map = parseToRgba(color).map(function (value, index) {\n      return (\n        // 3rd index is alpha channel which is already normalized\n        index === 3 ? value : value / 255\n      );\n    }),\n    _parseToRgba$map2 = _slicedToArray(_parseToRgba$map, 4),\n    red = _parseToRgba$map2[0],\n    green = _parseToRgba$map2[1],\n    blue = _parseToRgba$map2[2],\n    alpha = _parseToRgba$map2[3];\n  var max = Math.max(red, green, blue);\n  var min = Math.min(red, green, blue);\n  var lightness = (max + min) / 2; // achromatic\n\n  if (max === min) return [0, 0, lightness, alpha];\n  var delta = max - min;\n  var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  var hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n  return [hue, saturation, lightness, alpha];\n}\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\n\nfunction hsla(hue, saturation, lightness, alpha) {\n  return \"hsla(\".concat((hue % 360).toFixed(), \", \").concat(guard(0, 100, saturation * 100).toFixed(), \"%, \").concat(guard(0, 100, lightness * 100).toFixed(), \"%, \").concat(parseFloat(guard(0, 1, alpha).toFixed(3)), \")\");\n}\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\n\nfunction adjustHue(color, degrees) {\n  var _parseToHsla = parseToHsla(color),\n    _parseToHsla2 = _slicedToArray(_parseToHsla, 4),\n    h = _parseToHsla2[0],\n    s = _parseToHsla2[1],\n    l = _parseToHsla2[2],\n    a = _parseToHsla2[3];\n  return hsla(h + degrees, s, l, a);\n}\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\nfunction darken(color, amount) {\n  var _parseToHsla3 = parseToHsla(color),\n    _parseToHsla4 = _slicedToArray(_parseToHsla3, 4),\n    hue = _parseToHsla4[0],\n    saturation = _parseToHsla4[1],\n    lightness = _parseToHsla4[2],\n    alpha = _parseToHsla4[3];\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\n\nfunction desaturate(color, amount) {\n  var _parseToHsla5 = parseToHsla(color),\n    _parseToHsla6 = _slicedToArray(_parseToHsla5, 4),\n    h = _parseToHsla6[0],\n    s = _parseToHsla6[1],\n    l = _parseToHsla6[2],\n    a = _parseToHsla6[3];\n  return hsla(h, s - amount, l, a);\n}\n\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\n\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  function f(x) {\n    var channel = x / 255;\n    return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }\n  var _parseToRgba = parseToRgba(color),\n    _parseToRgba2 = _slicedToArray(_parseToRgba, 3),\n    r = _parseToRgba2[0],\n    g = _parseToRgba2[1],\n    b = _parseToRgba2[2];\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\n// taken from:\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\n\nfunction getContrast(color1, color2) {\n  var luminance1 = getLuminance(color1);\n  var luminance2 = getLuminance(color2);\n  return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\n\nfunction rgba(red, green, blue, alpha) {\n  return \"rgba(\".concat(guard(0, 255, red).toFixed(), \", \").concat(guard(0, 255, green).toFixed(), \", \").concat(guard(0, 255, blue).toFixed(), \", \").concat(parseFloat(guard(0, 1, alpha).toFixed(3)), \")\");\n}\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\n\nfunction mix(color1, color2, weight) {\n  var normalize = function normalize(n, index) {\n    return (\n      // 3rd index is alpha channel which is already normalized\n      index === 3 ? n : n / 255\n    );\n  };\n  var _parseToRgba$map3 = parseToRgba(color1).map(normalize),\n    _parseToRgba$map4 = _slicedToArray(_parseToRgba$map3, 4),\n    r1 = _parseToRgba$map4[0],\n    g1 = _parseToRgba$map4[1],\n    b1 = _parseToRgba$map4[2],\n    a1 = _parseToRgba$map4[3];\n  var _parseToRgba$map5 = parseToRgba(color2).map(normalize),\n    _parseToRgba$map6 = _slicedToArray(_parseToRgba$map5, 4),\n    r2 = _parseToRgba$map6[0],\n    g2 = _parseToRgba$map6[1],\n    b2 = _parseToRgba$map6[2],\n    a2 = _parseToRgba$map6[3]; // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n\n  var alphaDelta = a2 - a1;\n  var normalizedWeight = weight * 2 - 1;\n  var combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  var weight2 = (combinedWeight + 1) / 2;\n  var weight1 = 1 - weight2;\n  var r = (r1 * weight1 + r2 * weight2) * 255;\n  var g = (g1 * weight1 + g2 * weight2) * 255;\n  var b = (b1 * weight1 + b2 * weight2) * 255;\n  var a = a2 * weight + a1 * (1 - weight);\n  return rgba(r, g, b, a);\n}\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\n\nfunction getScale() {\n  for (var _len = arguments.length, colors = new Array(_len), _key = 0; _key < _len; _key++) {\n    colors[_key] = arguments[_key];\n  }\n  return function (n) {\n    var lastIndex = colors.length - 1;\n    var lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    var highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n    var color1 = colors[lowIndex];\n    var color2 = colors[highIndex];\n    var unit = 1 / lastIndex;\n    var weight = (n - unit * lowIndex) / unit;\n    return mix(color1, color2, weight);\n  };\n}\nvar guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\n\nfunction hasBadContrast(color) {\n  var standard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'aa';\n  var background = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#fff';\n  return getContrast(color, background) < guidelines[standard];\n}\n\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\nfunction lighten(color, amount) {\n  return darken(color, -amount);\n}\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\n\nfunction transparentize(color, amount) {\n  var _parseToRgba3 = parseToRgba(color),\n    _parseToRgba4 = _slicedToArray(_parseToRgba3, 4),\n    r = _parseToRgba4[0],\n    g = _parseToRgba4[1],\n    b = _parseToRgba4[2],\n    a = _parseToRgba4[3];\n  return rgba(r, g, b, a - amount);\n}\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\n\nfunction opacify(color, amount) {\n  return transparentize(color, -amount);\n}\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\n\nfunction readableColorIsBlack(color) {\n  return getLuminance(color) > 0.179;\n}\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\n\nfunction readableColor(color) {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\n\nfunction saturate(color, amount) {\n  return desaturate(color, -amount);\n}\n\n/**\n * Takes in any color and returns it as a hex code.\n */\n\nfunction toHex(color) {\n  var _parseToRgba5 = parseToRgba(color),\n    _parseToRgba6 = _slicedToArray(_parseToRgba5, 4),\n    r = _parseToRgba6[0],\n    g = _parseToRgba6[1],\n    b = _parseToRgba6[2],\n    a = _parseToRgba6[3];\n  var hex = function hex(x) {\n    var h = guard(0, 255, x).toString(16); // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n\n    return h.length === 1 ? \"0\".concat(h) : h;\n  };\n  return \"#\".concat(hex(r)).concat(hex(g)).concat(hex(b)).concat(a < 1 ? hex(Math.round(a * 255)) : '');\n}\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\n\nfunction toRgba(color) {\n  return rgba.apply(void 0, _toConsumableArray(parseToRgba(color)));\n}\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\n\nfunction toHsla(color) {\n  return hsla.apply(void 0, _toConsumableArray(parseToHsla(color)));\n}\nexport { ColorError$1 as ColorError, adjustHue, darken, desaturate, getContrast, getLuminance, getScale, guard, hasBadContrast, hsla, lighten, mix, opacify, parseToHsla, parseToRgba, readableColor, readableColorIsBlack, rgba, saturate, toHex, toHsla, toRgba, transparentize };","map":{"version":3,"mappings":"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","names":["guard","low","high","value","Math","min","max","ColorError","constructor","color","Error","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","hash","str","i","length","charCodeAt","colorToInt","replace","compressedColorMap","split","reduce","acc","next","key","substring","hex","toString","prefix","normalizedColorName","result","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","finalRed","finalGreen","finalBlue","parseToHsla","index","alpha","delta","hsla","toFixed","adjustHue","degrees","darken","desaturate","getLuminance","f","channel","pow","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","alphaDelta","normalizedWeight","combinedWeight","weight2","weight1","getScale","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","background","lighten","transparentize","opacify","readableColorIsBlack","readableColor","saturate","toHex","toRgba","toHsla"],"sources":["/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/guard.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/ColorError.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/parseToRgba.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/parseToHsla.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/hsla.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/adjustHue.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/darken.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/desaturate.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/getLuminance.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/getContrast.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/rgba.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/mix.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/getScale.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/hasBadContrast.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/lighten.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/transparentize.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/opacify.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/readableColorIsBlack.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/readableColor.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/saturate.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/toHex.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/toRgba.ts","/home/guilherme/Imagens/Pokedex/node_modules/color2k/src/toHsla.ts"],"sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), a || 1] as [number, number, number, number];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n  .split(' ')\n  .reduce((acc, next) => {\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = '';\n    for (let i = 0; i < 6 - hex.length; i++) {\n      prefix += '0';\n    }\n\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n  }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa',\n  background: string = '#fff'\n): boolean {\n  return getContrast(color, background) < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}